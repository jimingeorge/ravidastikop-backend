service: linkedinravi
# app and org for use with dashboard.serverless.com
app: linkedin
org: ravimaddi18

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  # you can overwrite defaults here
  stage: dev
  region: us-east-1

custom:
  RaviLinkedInDynamoDBTable: "raviLinkedIn-table1-${self:provider.stage}"

iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - { "Fn::GetAtt": ["RaviLinkedInDynamoDBTable", "Arn"] }
environment:
  USERS_TABLE: ${self:custom.tableName}
functions:
  hello:
    handler: handler.hello
    timeout: 100
    environment:
      TABLE: ${self:custom.RaviLinkedInDynamoDBTable}
    events:
      - http:
          path: /
          method: GET
          cors: true
  linkedInAccessToken:
    handler: acccesToken.storage
    timeout: 100
    environment:
      TABLE: ${self:custom.RaviLinkedInDynamoDBTable}
    events:
      - http:
          path: /api
          method: POST
          cors: true
  blogspot:
    handler: blogspot.blog
    timeout: 100
    environment:
      TABLE: ${self:custom.RaviLinkedInDynamoDBTable}
    events:
      - http:
          path: /api/blog
          method: GET
          cors: true
resources:
  Resources:
    RaviLinkedInDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.RaviLinkedInDynamoDBTable}
